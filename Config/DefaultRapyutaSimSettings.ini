; Default Rapyuta Sim settings

[/Script/RapyutaSimulationPlugins.RRROS2GameMode]
; Blueprint class names (also used as their entity model names) to be registered as spawnable entity types
BPSpawnableClassNames="BP_TurtlebotBurgerVehicle"
+BPSpawnableClassNames="BP_TurtlebotWaffleVehicle"
+BPSpawnableClassNames="BP_TurtlebotBurger"
+BPSpawnableClassNames="BP_TurtlebotWaffle"

; Asset paths of classes to be registered as spawnable entity types
; NOTE: For [ARRSkeletalRobot] or its child classes, its model name is URDF/SDF's robot model name. Use T::StaticClass()->GetPathName() for the class-paths
NativeSpawnableClassPaths=(("TurtlebotBurger", "/Script/RapyutaSimulationPlugins.TurtlebotBurger"), \
                           ("TurtlebotBurgerVehicle", "/Script/RapyutaSimulationPlugins.TurtlebotBurgerVehicle"), \
                           ("turtlebot3_burger", "/Script/turtlebot3.RRSkeletalTurtlebot"), \
                           ("turtlebot3_waffle", "/Script/turtlebot3.RRSkeletalTurtlebot"), \
                           ("tb3_burger", "/Script/RapyutaSimRobotImporter.RRDifferentialDriveRobot"), \
                           ("tb3_waffle", "/Script/RapyutaSimRobotImporter.RRDifferentialDriveRobot"), \
                           ("target_point", "/Script/Engine.TargetPoint") \
)

[/Script/RapyutaSimulationPlugins.RRGameState]
; Name path to Sim common log output folder. If relative or empty, its base is the project's Saved directory
;SIM_OUTPUTS_BASE_FOLDER_NAME=""

[/Script/RapyutaSimulationPlugins.RRGameSingleton]
; Base path whereby runtime-created blueprint classes are saved, ideally in Project, so it could reference all plugins' assets
;ASSETS_RUNTIME_BP_SAVE_BASE_PATH = "/Game/RapyutaContents/Blueprints"

; Relative asset paths (to /Game/RapyutaContents/DynamicContents OR /<PluginModule>/DynamicContents) of the folders housing dynamically-used assets of various particular resource data types (StaticMesh, SkeletalMesh, Material, Texture, etc.)
; They are to serve using those assets at runtime in cpp, as avoiding static loading in class constructors.
; Refs: 
; [Avoid Referencing Assets by String](https://docs.unrealengine.com/4.27/en-US/Resources/SampleGames/ARPG/BalancingBlueprintAndCPP/#:~:text=Avoid%20Referencing%20Assets%20by%20String)
; [Asynchronous Asset Loading](https://docs.unrealengine.com/5.2/en-US/asynchronous-asset-loading-in-unreal-engine)
;FOLDER_PATH_ASSET_PAKS = "Paks"
;FOLDER_PATH_ASSET_STATIC_MESHES = "StaticMeshes"
;FOLDER_PATH_ASSET_SKELETAL_MESHES = "SkeletalMeshes"
;FOLDER_PATH_ASSET_SKELETONS = "Skeletons"
;FOLDER_PATH_PHYSICS_ASSETS = "PhysicsAssets"
;FOLDER_PATH_ASSET_MATERIALS = "Materials"
;FOLDER_PATH_ASSET_TEXTURES = "Textures"
;FOLDER_PATH_ASSET_DATA_TABLES = "DataTables"

[/Script/RapyutaSimRobotImporter.RREntityCommon]
; Absolute or relative (to either Project or its plugin dir) path list of parent folders housing Entity model description packages
; Default values: ((OBJECT, "ExternalData/GazeboModels"), (ROBOT, "ExternalData/RobotModels"))
;+EXTERNAL_ENTITY_MODELS_FOLDER_PATHS=""

; Model-free entity class-paths, ones not requiring model description (either XML or CAD or DataTable). Use T::StaticClass()->GetPathName() for the class-paths
; Default values: "/Script/Engine.TargetPoint"
;+ModelFreeEntityClassesPaths=""